////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////


//////////////
// TEXTURES //
//////////////
Texture2D diffuseTexture1 : register(t0);
Texture2D normalTexture1 : register(t1);
Texture2D normalTexture2 : register(t2);


//////////////
// SAMPLERS //
//////////////
SamplerState SampleType : register(s0);


//////////////////////
// CONSTANT BUFFERS //
//////////////////////
cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

cbuffer ColorBuffer
{
    float4 sandColor;
    float4 grassColor;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float4 color : COLOR;
	float4 terrainPosition : TERPOS0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
    float slope;
    float3 lightDir;
    float4 textureColor1;
    float4 textureColor2;
	float4 dirtColor = float4(99.0f / 255.0f, 77.0f / 255.0f, 56.0f / 255.0f, 1);
    float4 bumpMap;
    float3 bumpNormal;
    float lightIntensity;
    float4 material1;
    float4 material2;
    float blendAmount;
    float4 color;
	float height;
	float normalizedHeight;


	// Calculate the slope of this point.
    slope = 1.0f - input.normal.y;

	//Determine height of pixel
	height = input.terrainPosition.y;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

	//Determine first texture color based off height & slope
	textureColor1 = diffuseTexture1.Sample(SampleType, input.tex);
	if(height > 27.0 && slope < 0.5)
	{
		textureColor1 = dirtColor;
	} 
	else if(height > 22.0 && slope < 0.5) {
		normalizedHeight = (height - 22.0) / (27.0 - 22.0);
		textureColor1 = lerp(textureColor1, dirtColor, normalizedHeight);
	}

    // Setup the first material.
    bumpMap = normalTexture1.Sample(SampleType, input.tex);
    bumpMap = (bumpMap * 2.0f) - 1.0f;
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);
    lightIntensity = saturate(dot(bumpNormal, lightDir));
    material1 = saturate(textureColor1 * lightIntensity);
	
	//Determine second texture color based off height
	if(height < 22.0)
	{
		textureColor2 = sandColor;
	} 
	else if(height < 27.0) {
		normalizedHeight = (height - 22.0) / (27.0 - 22.0);
		textureColor2 = lerp(sandColor, grassColor, normalizedHeight);
	}
	else {
		textureColor2 = grassColor;
	}

    // Setup the second material.
    bumpMap = normalTexture2.Sample(SampleType, input.tex);
    bumpMap = (bumpMap * 2.0f) - 1.0f;
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);
    lightIntensity = saturate(dot(bumpNormal, lightDir));
    material2 = saturate(textureColor2 * lightIntensity);

	// Determine which material to use based on slope.
    if(slope < 0.3)
    {
        blendAmount = slope / 0.3f;
        color = lerp(material2, material1, blendAmount);
    }
    if(slope >= 0.3) 
    {
        color = material1;
    }

    return color;
}